#!/usr/bin/env scala 

import java.io._

val mav = "mavros_msgs"
val msgs = new File(mav + "/" + "msg/").listFiles.toList
val srvs = new File(mav + "/" + "srv/").listFiles.toList

val constant = raw"(\S+)\s(\S+)=(\S+)$$".r
val data = raw"(\S+)\s([^\s=]+)$$".r

var names: List[String] = List()

for (msg <- msgs) {
  
  val str = new MsgToScala(msg).tmpl
  writeFile(msg, str)
  names ::= getName(msg)
}

for (srv <- srvs) {
  
  val str = new SrvToScala(srv).tmpl
  writeFile(srv, str)
  names ::= getName(srv)
}

val mavrosExp = "trait MavrosExp extends " + names.map(_+"Exp").mkString(" with ") + "{ self: RosExp => }"
val mavrosApi = "trait MavrosApi extends " + names.map(_+"Api").mkString(" with ") + "{ self: RosApi => }"
val scalaGenMavros = "trait ScalaGenMavros extends " + names.map("ScalaGen"+_).mkString(" with ") + "{ val IR: RosCompiler }"
val mavF = new File("Mavros.scala")
writeFile(mavF, "package spatial.ros\n\n"+ "import spatial.ros.api._\n\n" + mavrosExp + "\n\n" + mavrosApi + "\n\n" + scalaGenMavros)

def getName(file: File) =
  remap(file.getName.split('.')(0))

def quote(s:String) = s match {
  case "type" => "typ"
  case _ => s
}

def remap(tp: String) = {
  val t = tp.split('/').last.takeWhile(_ != '[') match {
    case "Quaternion" => "Quaternion"                
    case "Point" => "Point"            
    case "Vector3" => "Vec3"
    case "ParamValue" => "ParamValue"          
    case "FileEntry" => "FileEntry"    
    case "Waypoint" => "Waypoint"
    case "bool" => "Bool"
    case "float32" => "FltPt[_24,_8]"
    case "float64" => "FltPt[_53,_11]"      
    case "int8" => "FixPt[TRUE,_8,_0]"
    case "int16" => "FixPt[TRUE,_16,_0]"
    case "int32" => "FixPt[TRUE,_32,_0]"      
    case "int64" => "FixPt[TRUE,_64,_0]"
    case "uint8" => "FixPt[FALSE,_8,_0]"
    case "uint16" => "FixPt[FALSE,_16,_0]"
    case "uint32" => "FixPt[FALSE,_32,_0]"      
    case "uint64" => "FixPt[FALSE,_64,_0]"            
    case "string" => "Text"
    case _ => tp
  }

  var toStrip = tp
  var r = t
  while (toStrip.takeRight(2) == "[]") {
    toStrip = toStrip.dropRight(2)
    r = "MetaArray["+r+"]"
  }
  r
}

def remap_s(tp: String) =
  remap(tp).split('[')(0)

def ident(x: Seq[Any], tab: Int) =
  x.map(" "*(2*tab) + _).mkString("\n")

class MsgToScala(f: File) {
  lazy val lines = io.Source.fromFile(f).getLines.filterNot(_.startsWith("#")).toList
  def input = lines
  val name = getName(f)
  println(name)

  val constants = input collect {
    case constant(a, b, c) => (a, b, c)
  }

  val datas = input collect {
    case data(a, b) if !a.contains("Header") => (a, b)
  }

  val apis = datas map { case (t, n) =>
    s"@api def ${quote(n)}: ${remap(t)} = ${remap_s(t)}(stage(${name}_${n}(s))(ctx))"
  }
  val nodes = datas map { case (t, n) =>
    s"""
case class ${name}_${n}(msg: Exp[$name]) extends Op[${remap(t)}] {
  def mirror(f: Tx) = stage(${name}_${n}(f(msg)))(EmptyContext)
}
"""
  }

  val nodesGen = datas.map { case (t, n) =>
    s"""case ${name}_${n}(msg) => emit(src"val $$lhs = $$msg.$n")"""
  }
  
  val cs = constants map { case (t, n, v) =>
    s"val ${quote(n)}: ${remap(t)} = $v"
  }

  val ctorArgs = datas.map { case (t, n) =>
    s"${quote(n)}: ${remap(t)}"
  }.mkString(", ")


  val ctorArgsP = datas.map { case (t, n) =>
    s"${quote(n)}"
  }.mkString(", ")

  val ctorArgsD = datas.map { case (t, n) =>
    s"$$${quote(n)}"
  }.mkString(", ")
  
  val ctorArgsAppliedS  = datas.map { case (t, n) =>
    s"${quote(n)}.s"
  }.mkString(", ")

  val ctorArgsAppliedF  = datas.map { case (t, n) =>
    s"f(${quote(n)})"
  }.mkString(", ")
  
  val ctorArgsExp = datas.map { case (t, n) =>
    s"${quote(n)}: Exp[${remap(t)}]"
  }.mkString(", ")

  def tmpl =
s"""
package spatial.ros

import forge._
import org.virtualized._
import argon.codegen.scalagen.ScalaCodegen
import spatial.ros.codegen.scalagen.RosScalaCodegen

trait ${name}Api extends ${name}Exp {
  self: RosApi =>

}

trait ${name}Exp {
  self: RosExp =>

  implicit object ${name}Type extends Meta[$name] {
    def wrapped(x: Exp[$name]) = $name(x)
    def stagedClass = classOf[$name]
    def isPrimitive = false
  }

  implicit object ${name}Msg extends Msg[$name]

  case class $name(s: Exp[$name]) extends MetaAny[$name] {
${ident(apis, 2)}
    @api def ===(that: $name) = ???
    @api def =!=(that: $name) = ???
    @api def toText: Text = textify(this)
  }

${ident(nodes, 1)}
  case class New$name($ctorArgsExp) extends Op[$name] {
    def mirror(f: Tx) = stage(New$name($ctorArgsAppliedF))(EmptyContext)
  }

  object $name {

  @api def apply($ctorArgs): $name = $name(stage(New$name($ctorArgsAppliedS))(ctx))
${ident(cs, 2)}

  }

}

trait ScalaGen${name} extends RosScalaCodegen {
  val IR: RosExp
  import IR._

  override protected def emitNode(lhs: Sym[_], rhs: Op[_]): Unit = rhs match {
${ident(nodesGen, 2)}
    case New$name($ctorArgsP) =>
      emit(src"val $$lhs = $name($ctorArgsD)")
    case _ => super.emitNode(lhs, rhs)
  }

}

"""
}

class SrvToScala(f: File) extends MsgToScala(f) {
  def split = lines.splitAt(lines.indexOf("---"))
  override def input = split._1
  val rep = split._2.drop(1)
  val nameRep = name+"Rep"

  val constantsRep = rep collect {
    case constant(a, b, c) => (a, b, c)
  }

  val datasRep = rep collect {
    case data(a, b) if !a.contains("Header") => (a, b)
  }

  val apisRep = datasRep map { case (t, n) =>
    s"@api def ${quote(n)}: ${remap(t)} = ${remap_s(t)}(stage(${nameRep}_${n}(s))(ctx))"
  }

  val nodesRep = datasRep map { case (t, n) =>
    s"""
case class ${nameRep}_${n}(srv: Exp[$nameRep]) extends Op[${remap(t)}] {
  def mirror(f: Tx) = stage(${nameRep}_${n}(f(srv)))(EmptyContext)
}
"""
  }

  val nodesGenRep = datasRep map { case (t, n) =>
    s"""case ${nameRep}_${n}(msg) => emit(src"val $$lhs = $$msg.$n")"""
  }

  val csRep = constantsRep map { case (t, n, v) =>
    s"val ${quote(n)}: ${remap(t)} = $v"
  }

  override def tmpl =
  s"""
package spatial.ros

import forge._
import org.virtualized._
import spatial.ros.codegen.scalagen.RosScalaCodegen

trait ${name}Api extends ${name}Exp {
  self: RosApi =>

}

trait ${name}Exp {
  self: RosExp =>
  
  implicit object ${name}Type extends Meta[$name] {
    def wrapped(x: Exp[$name]) = $name(x)
    def stagedClass = classOf[$name]
    def isPrimitive = false
  }

  implicit object ${name}Srv extends Srv[$name] {
    type Response = ${nameRep}
    def response(srv: $name) = srv.response
  }

  implicit object ${nameRep}Type extends Meta[$nameRep] {
    def wrapped(x: Exp[$nameRep]) = $nameRep(x)
    def stagedClass = classOf[$nameRep]
    def isPrimitive = false
  }

  case class $name(s: Exp[$name]) extends MetaAny[$name] {
${ident(apis, 2)}
    @api def response: $nameRep = $nameRep(stage(${name}Reply(s))(ctx))
    @api def ===(that: $name): Bool = ???
    @api def =!=(that: $name): Bool = ???
    @api def toText: Text = textify(this)
  }

  case class $nameRep(s: Exp[$nameRep]) extends MetaAny[$nameRep] {
${ident(apisRep, 2)}
    @api def ===(that: $nameRep): Bool = ???
    @api def =!=(that: $nameRep): Bool = ???
    @api def toText: Text = textify(this)
  }

${ident(nodes, 1)}
${ident(nodesRep, 1)}
  case class ${name}Reply(srv: Exp[$name]) extends Op[$nameRep]{
    def mirror(f: Tx) = stage(${name}Reply(f(srv)))(EmptyContext)
  }
  case class New$name($ctorArgsExp) extends Op[$name] {
    def mirror(f: Tx) = stage(New$name($ctorArgsAppliedF))(EmptyContext)
  }

  
  object $name {
${ident(cs, 2)}
  @api def apply($ctorArgs): $name = $name(stage(New$name($ctorArgsAppliedS))(ctx))
  }

  object $nameRep {
${ident(csRep, 2)}
  }

}

trait ScalaGen${name} extends RosScalaCodegen {
  val IR: RosExp
  import IR._

  override protected def emitNode(lhs: Sym[_], rhs: Op[_]): Unit = rhs match {
${ident(nodesGen, 2)}
${ident(nodesGenRep, 2)}
    case New$name($ctorArgsP) =>
      emit(src"val $$lhs = $name($ctorArgsD)")
    case ${name}Reply(srv) =>
      emit(src"val $$lhs = $$srv.response")
    case _ => super.emitNode(lhs, rhs)
  }

}
"""  

}

def writeFile(f: File, s: String) = {
  val name = getName(f)
  val out = new File("ros/src/main/scala/mavros_msgs/"+ name +".scala")
  out.mkdirs()
  if (out.exists)
    out.delete()
  out.createNewFile
  val pw = new PrintWriter(out)
  pw.println(s)
  pw.close()
}

