#!/usr/bin/env scala

import java.io._

val mav = "mavros_msgs"
val msgs = new File(mav + "/" + "msg/").listFiles.toList
val srvs = new File(mav + "/" + "srv/").listFiles.toList

val constant = raw"(\S+)\s(\S+)=(\S+)$$".r
val data = raw"(\S+)\s([^\s=]+)$$".r

var names: List[String] = List()

for (msg <- msgs) {
  
  val str = msgToScala(msg)
  writeFile(msg, str)
  names ::= getName(msg)
}

for (srv <- srvs) {
  
  val str = srvToScala(srv)
  writeFile(srv, str)
  names ::= getName(srv)
}

val mavrosExp = "trait MavrosExp extends " + names.map(_+"Exp").mkString(" with ") + "{ self: RosExp => }"
val mavrosApi = "trait MavrosApi extends " + names.map(_+"Api").mkString(" with ") + "{ self: RosApi => }"
val mavF = new File("Mavros.scala")
writeFile(mavF, "package spatial.ros\n\n" + mavrosExp + "\n\n" + mavrosApi)

def getName(file: File) =
  file.getName.split('.')(0)

def quote(s:String) = s match {
  case "type" => "`type`"
  case _ => s
}
def remap(tp: String) = {
  val t = tp.takeWhile(_ != '[') match {
    case "geometry_msgs/Quaternion" => "Quaternion"                
    case "geometry_msgs/Point" => "Point"            
    case "geometry_msgs/Vector3" => "Vector3"
    case "mavros_msgs/ParamValue" => "ParamValue"          
    case "mavros_msgs/FileEntry" => "FileEntry"    
    case "mavros_msgs/Waypoint" => "Waypoint"
    case "bool" => "Bool"
    case "float32" => "FltPt[_24,_8]"
    case "float64" => "FltPt[_53,_11]"      
    case "int8" => "FixPt[TRUE,_8,_0]"
    case "int16" => "FixPt[TRUE,_16,_0]"
    case "int32" => "FixPt[TRUE,_32,_0]"      
    case "int64" => "FixPt[TRUE,_64,_0]"
    case "uint8" => "FixPt[FALSE,_8,_0]"
    case "uint16" => "FixPt[FALSE,_16,_0]"
    case "uint32" => "FixPt[FALSE,_32,_0]"      
    case "uint64" => "FixPt[FALSE,_64,_0]"            
    case "string" => "Text"
    case _ => tp
  }

  var toStrip = tp
  var r = t
  while (toStrip.takeRight(2) == "[]") {
    toStrip = toStrip.dropRight(2)
    r = "Array["+r+"]"
  }
  r
}

def msgToScala(f: File) = {
  val lines = io.Source.fromFile(f).getLines.filterNot(_.startsWith("#")).toList
  val name = getName(f)

  var cc = "case class " + name + "("
  var o = "object " +name + " {"

  val constants = lines collect {
    case constant(a,b,c) =>
      "val " + quote(b) + " = " + c
  }
  val datas = lines collect {
    case data(a, b) if !a.contains("Header") =>
      quote(b) + ": " + remap(a)
  }

  cc += datas.mkString(", ")
  cc += ")"

  o += constants.mkString("\n")
  o += "\n}"

  var r = "package spatial.ros\n\n"
  r += "trait "+name+ "Api extends " + name
  r += """Exp {
    self: RosApi =>

}

trait """

  r += name +"Exp {\n"
  r += "    self: RosExp =>\n\n"
  r += "    " + cc + "\n"
  r += "}\n\n"
  r += o

  r


}

def srvToScala(f: File) = {
  val lines = io.Source.fromFile(f).getLines.filterNot(_.startsWith("#")).toList
  val (req, repP) = lines.splitAt(lines.indexOf("---"))
  val rep = repP.drop(1)
  val name = getName(f)

  var response = false  
  var ccReq = "case class " + name+ "("
  var ccRep = "case class " + name+ "Reply("
  var o = "object " +name + " {"

  val constantsReq = req collect {
    case constant(a,b,c) =>
      "val " + quote(b) + " = " + c
  }
  val datasReq = req collect {
    case data(a, b) if !a.contains("Header") =>
      quote(b) + ": " + remap(a)
  }


  val constantsRep = rep collect {
    case constant(a,b,c) =>
      "val " + quote(b) + " = " + c
  }
  val datasRep = rep collect {
    case data(a, b) if !a.contains("Header") =>
      quote(b) + ": " + remap(a)
  }


  ccReq += datasReq.mkString(", ")
  ccReq += ")"

  ccRep += datasRep.mkString(", ")
  ccRep += ")"

  o += constantsReq.mkString("\n")
  o += constantsRep.mkString("\n")  
  o += "\n}"

  var r = "package spatial.ros\n\n"
  r += "trait "+name+ "Api extends " + name 
  r += """Exp {
self: RosApi =>

  }

trait """

  r += name +"Exp {\n"
  r += "    self: RosExp =>\n\n"
  r += "    " + ccReq + "\n    " + ccRep + "\n"  
  r += "}\n\n"
  r += o

  r
}
def writeFile(f: File, s: String) = {
  val name = getName(f)
  val out = new File("ros/src/main/scala/mavros_msgs/"+ name +".scala")
  out.mkdirs()
  if (out.exists)
    out.delete()
  out.createNewFile
  val pw = new PrintWriter(out)
  pw.println(s)
  pw.close()
}

